<?php
/**
 * Created by PhpStorm.
 * User: ZQ
 * Date: 2018/12/17
 * Time: 14:26
 */

namespace frontend\models\user;


use frontend\components\forms\Tools;
use yii\db\ActiveRecord;
use yii\validators\Validator;
use yii\web\UploadedFile;

class BlogUserModel extends ActiveRecord
{

    public static function tableName()
    {
        return '{{%blog_user}}';
    }


    // 设定表名称
    public function attributeLabels()
    {
        return [
            'name' => '姓名',
            'email' => '邮箱',
            'nickname' => '昵称',
            'password' => '密码',
            'sex' => '性别',
            'age' => '年龄',
            'birthday' => '生日',
            'privileges' => '权限',
            'major' =>  '职业' ,
            'education' => '学历',
            'subscribe' => '订阅通知',
            'tags' => '个性标签',
            'maxim' => '座右铭',
            'headimgurl' => '头像',
            'album' => '相册',
            'image_id' => '图片id',
            'mobile' =>  '手机号码',
            'maxim' =>  '座右铭' ,
            'introduction' => '简历附件',
            'note' => '开发笔记',
            'article' => '博客文章'
        ];
    }


    /*
     * 'boolean' => 'yii\validators\BooleanValidator',
        'captcha' => 'yii\captcha\CaptchaValidator',
        'compare' => 'yii\validators\CompareValidator',
        'date' => 'yii\validators\DateValidator',
        'datetime' => [
            'class' => 'yii\validators\DateValidator',
            'type' => DateValidator::TYPE_DATETIME,
        ],
        'time' => [
            'class' => 'yii\validators\DateValidator',
            'type' => DateValidator::TYPE_TIME,
        ],
        'default' => 'yii\validators\DefaultValueValidator',
        'double' => 'yii\validators\NumberValidator',
        'each' => 'yii\validators\EachValidator',
        'email' => 'yii\validators\EmailValidator',
        'exist' => 'yii\validators\ExistValidator',
        'file' => 'yii\validators\FileValidator',
        'filter' => 'yii\validators\FilterValidator',
        'image' => 'yii\validators\ImageValidator',
        'in' => 'yii\validators\RangeValidator',
        'integer' => [
            'class' => 'yii\validators\NumberValidator',
            'integerOnly' => true,
        ],
        'match' => 'yii\validators\RegularExpressionValidator',
        'number' => 'yii\validators\NumberValidator',
        'required' => 'yii\validators\RequiredValidator',
        'safe' => 'yii\validators\SafeValidator',
        'string' => 'yii\validators\StringValidator',
        'trim' => [
            'class' => 'yii\validators\FilterValidator',
            'filter' => 'trim',
            'skipOnArray' => true,
        ],
        'unique' => 'yii\validators\UniqueValidator',
        'url' => 'yii\validators\UrlValidator',
        'ip' => 'yii\validators\IpValidator',
     */

    // 定义字段的验证规则, 没定义的不能保存和加载
    public function rules()
    {
        return [
            [[
                'name','nickname','password','sex','age','birthday','privileges',
                'major','education','subscribe','tags','maxim','album',
                'maxim','note','article',
            ],'safe'],
            [['email',],'email'],
            [['headimgurl'], 'image', 'skipOnEmpty' => true, 'extensions' => 'png, jpg'],
            [['introduction'], 'file', 'skipOnEmpty' => true, 'extensions' => 'doc, docx, pdf, jpg, png'],
        ];
    }

    // 文件上传的保存方法
    public function upload()
    {
        if ($this->validate()) {

            Tools::upload($this,'headimgurl');
            Tools::upload($this,'introduction');
            return true;
        } else {
            return false;
        }
    }

    public static function json($value)
    {
        return json_encode($value,JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
    }

    /**
     * 数据类型转换
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        !empty($this->privileges)
            && $this->privileges = self::json($this->privileges);
        !empty($this->major)
            && $this->major = self::json($this->major);
        !empty($this->album) && is_array($this->album)
            && $this->album = self::json($this->album);
        // $this->tags   tags 默认是 ,分割的字符串
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    /**
     * 数据类型转换
     */
    public function afterFind()
    {
        $this->privileges = json_decode($this->privileges,true);
        $this->major = json_decode($this->major,true);
        $this->album = json_decode($this->album,true);

        //$this->tags = explode(',', $this->tags);
        return parent::afterFind(); // TODO: Change the autogenerated stub
    }


}